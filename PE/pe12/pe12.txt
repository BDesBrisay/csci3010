PE 12
Bryce DesBrisay
Nov 15, 2019


Section 1: c++

1.  What is a reference? What is a pointer? How are they different?
A reference refers to an object while a pointer points to the address of an object. Pointers can be NULL.

2.  Given the following class definition, how would you call the method CalculateMysteries? Instantiate a Foo if necessary.

class Foo {
public:
    Foo(int bar) : bar_(bar) {}

    int CalculateMysteries();

    static int TotalBars();

private:
    int bar_;

    static int baz_;
};

Foo f = new Foo(123);
f->CalculateMysteries()

3.  How would you call the method TotalBars()?
Foo::TotalBars()

4.  Can you access the field bar_ from inside the method TotalBars()? Why/why not?
Yes but only if you pass the instance of Foo into the static TotalBars method, otherwise, a static method can only access other static values/methods

5.  Can you access the field baz_ from inside the method CalculateMysteries()? Why/why not?
Yes, it is a regular class method that has access to all of the classes private fields

6.  Create a Foo reference, then call one of the Foo methods.
Foo * fee = &f;
fee.CalculateMysteries()

7.  Create a Foo pointer, then call one of the Foo methods.
Foo fii = &f
fii->CalculateMysteries()

8.  Why would you make a field a pointer?
Polymorphic behavior


Section 2: Good Coding Practices

1.  How would you improve the following code block:

bool hasACat = true; // this is an example, proceed as if hasACat could be true or false

if (hasACat == true) {
    // Do nothing.
} else {
    returnItForADog();
}

if (!hasACat) {
  returnItForADog();
}

2.  How would you improve the following code block:

int x = 3;
int y = 5;

if(y > x) {
    cout << "We're messing with numbers!" << endl;
    x += 1;
} else if(x > y) {
    cout << "We're messing with numbers!" << endl;
    y += 1;
} else if(x == y) {
    cout << "We're messing with numbers!" << endl;
    x  = x + y;
}

cout << "We're messing with numbers!" << endl;
if(y > x) {
    x += 1;
} else if(x > y) {
    y += 1;
} else if(x == y) {
    x  = x + y;
}


Section 3: keywords/const/overloading

1.  new: why would you use a const (non-static)...
  field/class attribute
    To ensure it can't be modified
  parameter
    To ensure it can't be modified & limit the scope of this
  methods
    To ensure it can't be modified/doesn't modify anything else

Where and why would you use the "virtual" keyword? What is this concept called and why is it important?
You would use it when you want to modify/override it in another class. This concept is called overriding and is important whenever you need to modify a method yet still preserve the original

Why would you need to overload a comparison operator?
If the type you are comparing is a complex object and the existing operator does not automatically properly evaluate the expression

How do you write the constructor in a derived class? Give an example base class and a class that inherits it. Your example can be similar to, but not the same as, examples from lecture.

class Base { 
public:
  Base() {}
};

class Derived : public Base { 
public:
  Derived() {}
  Derived(int i) {}
};


Section 4: Version control & git
What is a branch? Why would you work on a non-master branch?
A branch is a copy of an object so that additional modifications can be applied without overriding the original (master branch)
You would work on a non-master branch for adding an additional feature or whatever without overriding master branch until it is finished

If you are currently working on the branch my-fabulous-feature and your teammate merges another feature into master, what are the commands that you would run to switch to master, get the new code, switch back to your branch, and merge the new code from master into your branch?
git checkout master
git pull
git checkout my-fabulous-feature
git rebase master

What is the difference between issuing a "git pull" and submitting a "pull request"?
git pull brings the remote files to your local device
a pull request is a request to merge two branches together

When you're reviewing a PR, what are 3 different specific things that you should look for in the code that you're reviewing?
Style
Comments
Compilation

Section 5: bash
What is a PS1 in general (what does this control)?
The bash command prompt variable
It controls what text appears in the prompt of a terminal

Rate your level of comfort working on the command line on a scale from "not comfortable at all" to "completely comfortable, I am a command line master". Be honest with yourself. What are a few things that you wish you were more comfortable with on the command line?
Completely Comfortable. I am a Command Line master
I wish I was more comfortable using sed and awk

If you are developing in an IDE (such as Sublime, CodeRunner, CodeBlocks, XCode, etc) and your project isn't compiling by pressing the "run/build" button, what are two things that you could do to fix the issue? (Imagine that a friend is having this issue and you are explaining a few things that they could do to figure out what is going on).
Run it on the command line so it tells you the errors
Log out all the important values around where the error is and verify that those are what they should be


Section 6: Unit testing/Catch2
What is a TEST_CASE? What is a SECTION? What should each be used for? How many methods should be tested in each TEST_CASE? what about each SECTION?
TEST_CASE defines a case that you are testing for
  Should be used for defining overarching tests
SECTION defines an individual test within the larger TEST_CASE
  Should be used for running individual sub-tests of the larger TEST_CASE
One method should be tested in each TEST_CASE
The same method will be tested for in each SECTION but each instance will have different parameters


Section 7: Design Patterns
For each of the following design patterns, briefly describe what problem they solve and how they are implemented in c++.
a. Singleton
Only one instance of the class can be defined so that each new instance of it refers to the original one

b. Flyweight
Minimizes memory footprint of repeated objects by sharing as much data as possible

c. Prototype
Prototypes are used to make repeatedly defined structures easily constructed

d. Factory
Allows for objects to be created without being closely tied to the class hierarchy of the library

e. Iterator
Allows for iteration over objects to access the elements

In class, we went over how you will frequently interact with the design pattern Iterator but will rarely implement it yourselves. Why is this?
It is built into the language and there is no reason to rewrite trivial code if it is readily available to you through built in method or libraries.


Section 8: GUIs/Qt
What happens behind the scenes for a GUI to respond to a user interaction with the user interface?
Signals are sent out and slots catch them to trigger certain events

In Qt, how many signals can a single object emit? How many slots can respond to a single signal?
One Signal at a time
Multiple slots can respond to a single signal

Give example signatures for a custom signal that has at least one parameter and the slot that you would connect it to. Give an example call to connect that you would use to link the to signal to the slot. Describe when you would call emit for this signal.
---


Section 9: templating/writing generalizable code
Write a templated function void Swap(T & a, T & b).
template <class T> void swap(T & a, T & b) {
  T temp = a;
  a = b;
  b = temp;
}

Write a main() in which you make at least three calls to Swap that do work and two calls to Swap that you would expect to work but that don't.
int main() {
  int a = 1, 
    b = 2;
  swap(a, b);

  string c = "a",
    d = "b";
  swap(c, d)

  double e = 1.0,
    f = 2.0;
  swap(e, f);

  Book g = new Book("T","A"),
    h = new Book("Z","X");
  swap(g, h);

  Book * i = &g,
    j = &h;
  swap(i, j);
}

Adjust the non-working function calls so that they do work and write comments about why they did not intially work and what changes you made.
---

Why/why shouldn't you write all functions in c++ as templated functions?
Templates don't hide any information (all code is exposed in header file)
Adds to compilation time
Cryptic error messages


To turn in:
pe12_review.pdf -- don't forget to include your name! All example code in your turned in submission should be compilable!
to convert a .md file to .pdf, see this superuser post
I use pandoc which is run like pandoc --from markdown -o output.pdf input.md and can be installed via apt-get or brew